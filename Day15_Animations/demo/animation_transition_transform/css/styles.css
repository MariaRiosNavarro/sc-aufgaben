*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

div {
  width: 300px;
  height: 300px;
  margin: 5px;
}

/* Transition */
/* transition=shorthand
transition-delay_verzögerung
transition-duration_dauer
transition-property_auf was soll das gemacht ?
transition-timing-function_ wie soll es verlaufen */

.div1 {
  background-color: red;
  transition-property: width;
  /* transition-duration:1000ms */
  transition-duration: 1s;
  /* verzögerung zum starten */
  transition-delay: 500ms;
}

.div1:hover {
  width: 300px;
}

.div2 {
  background-color: yellow;
  transition-duration: 1s;
  transition-property: all;
  /* wenn ich das nur eine smoth ist
  transition-property: width; */
  transition-timing-function: ease;
}

.div2:hover {
  width: 300px;
  border-radius: 20px;
  background-color: goldenrod;
  transition-timing-function: linear;
}

.div3 {
  background-color: blue;
  transition-duration: 5s;
  transition-property: width border-radius;
  transition-timing-function: ease-in;
}

.div3:hover {
  width: 500px;
  border-radius: 20px;
}

/* The transition-timing-function property specifies the speed curve of the transition effect.

The transition-timing-function property can have the following values:

ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
linear - specifies a transition effect with the same speed from start to end
ease-in - specifies a transition effect with a slow start
ease-out - specifies a transition effect with a slow end
ease-in-out - specifies a transition effect with a slow start and end
cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function */

.div4 {
  background-color: green;
}

.div5 {
  background-color: violet;
}

/* !transform
https://www.w3schools.com/cssref/css3_pr_transform.php
*/

/* 
translate - shorthand
translateX
translateY
scale-shorthand
scaleX
scaleY
rotate=shorthand
rotatex
rotatey
rotatez
*/

/* bleiben an der fluss der seite */
.btn1 {
  /* transform: translateX(500px) translateY(-200px); */
  transform: translate(500px, -200px);
}

.btn2 {
  /* die nimmt der platz der sie braucht und kann evet anderen elementen verdecken */
  /* scale:2 ist 200% größer, 3 ist 300% großer.. etc */
  transform: translate(500px) scaleX(3) scaleY(3);
}

.btn3 {
  transform: rotateZ(45deg);
}

.btn5 {
  transform: translateY(200px);
  transition: transform 500ms ease;
}
.btn5:hover {
  transform: translateY(200px) scale(1.4) rotateZ(-10deg);
  cursor: pointer;
}

/* animation */
/* animation-name
animation-duration
animation-timing-function
animation-delay
animation-iteration-count
animation-direction
animation-fill-mode
animation-play-state */

.animation {
  background-color: lightblue;
  margin-left: 15rem;
  margin-top: 15rem;
  animation-name: boxToCircle;
  animation-duration: 5s;
  animation-iteration-count: infinite;
  animation-timing-function: ease;
  animation-delay: 0s;
  animation-direction: alternate;
  /* es bleib am ende wo der ende der animation ist und geht nicht zurück */
  animation-fill-mode: forwards;
}

/* @keyframes boxToCircle {
  from {
    background-color: red;
  }
  to {
    transform: translateY(500px);
  }
} */

/* from - to ist von 0 to 100%, ungern benutz */

@keyframes boxToCircle {
  0% {
    background-color: red;
    transform: rotate(0deg) translateX(0);
  }

  /* 13% {
    transform: rotate(45deg);
    background-color: orangered;
  } */

  25% {
    /* border-radius: 50%; */
    background-color: orange;
    /* border: 10px solid red; */
    transform: rotate(90deg);
    /* transform: scale(1.2); */
  }

  50% {
    background-color: yellow;
    /* border-radius: 50%; */
    transform: rotate(180deg);
    border: none;
  }

  75% {
    /* border-radius: 50%; */
    background-color: orange;
    /* border: 10px solid red; */
    transform: rotate(270deg);
    /* transform: scale(1.2); */
  }

  /* 88% {
    transform: rotate(270deg);
    background-color: orangered;
  } */

  100% {
    background-color: red;
    /* transform: scale(1) translateX(0px) rotate(0deg); */
    transform: translateX(0) rotate(360deg);
  }
}

/*  */
.padding {
  height: 500px;
}
